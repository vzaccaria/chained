  ---
layout      : 'default'
css         : 'types'
status      : 'draft'

title       : 'Definitions'
description : 'Definitions provide a re-usable format for sharing an interface design'
type        : 'UI Introduction'
---
<script src="/javascript/intro.js"></script>

<%- @partial('header') %>
<div class="main container">
  <div class="peek">
    <div class="ui vertical pointing secondary menu">
      <a class="active item">Definitions</a>
      <a class="item">Elements</a>
      <a class="item">Collections</a>
      <a class="item">Modules</a>
      <a class="item">Views</a>
      <a class="item">Authoring</a>
    </div>
  </div>

  <h2 class="ui dividing header">Defining Definitions</h2>

  <p>Definitions in semantic are groups of css, fonts, images, and javascript which make up a single element. Unlike other javascript libraries, semantic UI elements are stand-alone and only require their own assets to function correctly.</p>

  <h3 class="ui header">Definition Types</h3>
  <p>Semantic has five different ui definitions. These are useful patterns for describing re-usable parts of a website.</p>
  <table class="ui celled table segment">
    <tr>
      <td class="two wide"><b>Element</b></td>
      <td> a basic building block of a website, exists alone or in homogenous groups</td>
    </tr>
    <tr>
      <td><b>Collection</b></td>
      <td>a heterogeneous group of several elements which can usually be found together. often pairs with individual elements</td>
    </tr>
    <tr>
      <td><b>View</b></td>
      <td> a way to present common website content like comments, activity feeds</td>
    </tr>
    <tr>
      <td><b>Module</b></td>
      <td> an element that also includes behavior as part of its definition</td>
    </tr>
    <tr>
      <td><b>Behavior</b></td>
      <td> a set of behaviors not specfically tied to a design</td>
    </tr>
  </table>

  <h2 class="ui dividing header">UI Elements</h2>

  <p>UI Elements are page elements which are indivisible. This can be thought of as similar in definition as an "element" in chemistry.</p>

  <p>UI elements can have plural definitions when they are known to exist together in groups. Plural variations allow you to only specify qualities once, allowing them to be inferred across all members of a group.</p>

  <div class="code" data-type="html" data-label="true">
    <div class="large ui buttons">
      <div class="ui button">Cancel</div>
      <div class="ui button">Continue</div>
    </div>
  </div>

  <h3 class="ui header">Examples of UI elements:</h3>
  <table class="ui celled table">
    <tr>
      <td class="two wide"><b>Button</b></td>
      <td>
        <div class="ui labeled teal icon button"><i class="globe icon"></i>Button</div>
      </td>
    </tr>
    <tr>
      <td><b>Label</b></td>
      <td>
        <div class="ui label">label</div>
      </td>
    </tr>
    <tr>
      <td><b>Input</b></td>
      <td>
        <div class="ui icon input">
          <input value="input">
          <i class="search icon"></i>
        </div>
      </td>
    </tr>
    <tr>
      <td><b>Loader</b></td>
      <td>
        <div class="ui active inline loader"></div>
      </td>
    </tr>
    <tr>
      <td><b>Segment</b></td>
      <td>
        <div class="ui stacked segment">Segment</div>
      </td>
    </tr>
  </table>

  <h2 class="ui dividing header">UI Collections</h2>

  <p>UI Collections are groups of heterogeneous page elements which are usually found together. Carrying the chemistry metaphor, these can be thought of as molecules.</p>

  <p>UI collections have a definition of elements that exist, or could exist inside of them. They do not usually require all elements to be found, but they describe a list of the "usual suspects". Unlike elements definitions, collections are not typically useful to define in plural.</p>

  <h3 class="ui header">Examples of UI collections:</h3>
  <ul class="ui list">
    <li>Forms</li>
    <li>Tables</li>
    <li>Grids (Layout)</li>
    <li>Menus</li>
  </ul>

  <h2 class="ui dividing header">UI Modules</h2>

  <p>UI modules are elements where it's behavior is a fundamental part of its definition. UI Modules are dependent on the javascript which carry their definition. They also may be more complex, and have a variety of different functions. Further abusing the scientific analogy: These can be thought of as "organs".</p>

  <p>Examples of UI modules:</p>
  <ul class="ui list">
    <li>Popups</li>
    <li>Modals</li>
    <li>Chat Rooms</li>
  </ul>

  <h2 class="ui dividing header">UI Views</h2>

  <p>UI Views are common ways to present content so that it can be understood more easily. A view's definition in semantic only describes the content which typically occupies the view.</p>

  <h3 class="ui header">Examples of UI views:</h3>
  <ul class="ui list">
    <li>Comment Feed</li>
    <li>Activity Feed</li>
    <li>Product List</li>
  </ul>

  <h2 class="ui dividing header">Authoring UI</h2>

  <p><b>All UI</b>: The specification defines class name and html structures which can be used to represent an element
</p>
  <p><b>Elements</b>: An element definition gives states which an elements can occupy, common types of that element, and if necessary, defines how the element functions in groups.</p>
  <p><b>Collections</b>: Collection definitions list elements that it can include, and variations which can apply to both the collection, or individual elements found in the collection.</p>
  <p><b>Modules</b>: Module definitions include a list of behaviors that are commonly associated with an element</p>
  <p><b>Views</b>: View specifications defines the types of content the view usually display, and the heirarchy typical to presenting this content to the user.</p>

<!--   <a class="ui large right labeled teal icon button">
    Authoring Guide
    <i class="right arrow icon"></i>
  </a>
 -->

  <h3 class="ui header">Context sensitive</h3>

  <p>In Semantic, variations maintain context based on the element they modify, but keep the same vocabulary between elements. Just like how in English, the adjective 'big' may describe a different scale for a big planet versus a big insect.</p>

  <p>For example, a form you can have a variation called "inverted". This changes the appearance of form elements to work on dark backgrounds.</p>

  <div class="code" data-type="html" data-label="true">
  <div class="ui inverted form">
      <div class="field">
          <label>Name</label>
          <input type="text">
      </div>
  </div>
  </div>

  <p>The same variation can also be useful in the context of a menu although the implementation may be different.</p>

  <div class="code" data-type="html" data-label="true">
  <div class="ui inverted menu">
      <div class="item">Section 1</div>
      <div class="ui simple dropdown item">
          Dropdown
          <div class="menu">
              <div class="item">Dropdown item 1</div>
              <div class="item">Dropdown item 2</div>
          </div>
      </div>
  </div>
  </div>

  <div class="ui divider"></div>
  <a class="ui large right labeled teal icon button" href="/introduction/types.html">
    Next: Element Types
    <i class="right arrow icon"></i>
  </a>
<!--
  <h3 class="ui header" class="ui header">Known Limitations</h3>

  <p>Semantic uses the UI namespace to separate element definitions from the content that they define. This means that namespaces might conflict with other definitions if a variation or a type used matches the namespace of another ui definition.</p>

   -->
</div>